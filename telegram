#!/bin/sh


# HELP AN USAGE

SCRIPTNAME="$(basename $0)"
VERSION="0.3.2-sh"

version() {
	echo "telegram.sh $VERSION"
	if [ "$1" = "full" ]; then
		echo 
		echo "A telegram client to work on simple shell sh."
		echo "    https://github.com/lulis/telegram.sh"
		echo 
		echo "Based on original telegram.sh by Fabian Schlenz:"
		echo "    https://github.com/fabianonline/telegram.sh"
		echo 
	fi
}

help_usage() {
	version
	echo " Usage: $SCRIPTNAME [options]"
	echo " Options:"
	echo "    -m <text>      Message text to send"
	echo "    -              Get message from STDIN"
	echo "    -f <file>      Send a file"
	echo "    -i <file>      Send a file as image"
	echo "    -T <title>     Title of the message"
	echo "    -t <token>     Your telegram bot token"
	echo "    -c <chat_id>   Chat to send message"
	echo "    -l             List known chat_ids for current token"
	echo "    -M             Enables Markdown processing"
	echo "    -H             Enables HTML processing"
	echo "    -C             Send text as monospace code"
	echo "    -D             Disable link preview on text messages"
	echo "    -N             Send message without notification sound"
	echo "    -n             Dry-run: don't send, only print"
	echo "    -v             Verbose mode"
	echo "    -h             This help"
	echo "    --config       Show info about config files"
	echo "    --version      Show version info"
	exit $1
}

help_config() {
	version
	echo
	echo "The TOKEN and CHAT_ID will be searched in (latest has precedence):"
	echo "  1) globally in /etc/telegram.sh.conf"
	echo "  2) user-local in ~/.telegram.sh"
	echo "  3) environment variables TELEGRAM_TOKEN and TELEGRAM_CHAT"
	echo "  4) options -t and -c"
	echo
	exit $1
}


# DEPENDENCIES

for i in curl grep awk cut; do
	if ! [ -x "$(command -v $i)" ]; then missingDep="$missingDep $i"; fi
done
[ -n "$missingDep" ] && { echo "This script requires: $missingDep"; exit 1; }


# DEFINES

TOKEN=""
ACHAT=""
DEBUG=false
DRY_RUN=false
IMAGE_FILE=""
DOCUMENT_FILE=""
PARSE_MODE=""
CODE_MODE=0
ACTION=""
TITLE=""
DISABLE_WEB_PAGE_PREVIEW=false
DISABLE_NOTIFICATION=false

URL="https://api.telegram.org/bot"
FILE_URL="https://api.telegram.org/file/bot"
CURL_OPTIONS="-s"


# based on https://stackoverflow.com/a/38607019
json_console() {
	echo -n "$1" | grep -Eo '"[^"]*" *(: *([0-9]*|"[^"]*")[^{}\["]*|,)?|[^"\]\[\}\{]*|\{|\},?|\[|\],?|[0-9 ]*,?' | \
	awk '{if ($0 ~ /^[]}]/) i--; j=0; while (j++<i) printf " "; printf "%s\n", $0; if ($0 ~ /^[[{]/) i++}'
}

# based on http://www.etalabs.net/sh_tricks.html
fnmatch() {
	case "$2" in $1) return 0 ;; *) return 1 ;; esac ;
}


list_chats() {
	log "$URL$TOKEN"
	response=`curl $CURL_OPTIONS $URL$TOKEN/getUpdates`
	log "$response"
	echo 'Look for your chat_id below, something like "chat":{"id":<CHAT_ID>.'
	echo "Verify also first_name, last_name and username."
	echo "If the chat is not listed, send a message to your bot and try again."
	json_console "$response"
}

log() {
	[ "$DEBUG" = true ] && echo "DEBUG: $1"
}

check_file() {
	if [ ! -e "$1" ]; then
		echo "The file $1 does not exist."
		exit 1
	fi

	size=$(wc -c < "$1")
	if [ "$size" -gt 52428800 ]; then
		echo "File $1 is bigger than Telegram bots limits (currently 50MB)."
		exit 1
	fi
}

ARGNUM="$#"
while [ "$#" -gt 0 ]; do
	case $1 in
		-t) TOKEN="$2"; shift 2 ;;
		-c) ACHAT="$2"; shift 2 ;;
		-m) TEXT="$2"; shift 2 ;;
		-) TEXT="-"; shift ;;
		-i) IMAGE_FILE="$2"; shift 2 ;;
		-f) DOCUMENT_FILE="$2"; shift 2 ;;
		-T) TITLE="$2"; shift 2 ;;
		-M) PARSE_MODE="Markdown"; shift ;;
		-H) PARSE_MODE="HTML"; shift ;;
		-C) PARSE_MODE="Markdown"; CODE_MODE=1; shift ;;
		-l) ACTION="list_chats"; shift ;;
		-v) DEBUG=true; shift ;;
		-n) DRY_RUN=true; shift ;;
		-D) DISABLE_WEB_PAGE_PREVIEW=true; shift ;;
		-N) DISABLE_NOTIFICATION=true; shift ;;
		-h) help_usage 0 ;;
		--config) help_config 0 ;;
		--version) version full ; exit ;;
		-?|*) echo "Invalid option: '$1' \nUse $SCRIPTNAME -h for help." ; exit 1 ;;
		esac
done

log "TOKEN is '$TOKEN'"
log "ACHAT is '$ACHAT'"

log "Importing token/chat env vars..."
[ -z "$TOKEN" ] && TOKEN=$TELEGRAM_TOKEN
[ -z "$ACHAT" ] && ACHAT=$TELEGRAM_CHAT
log "TOKEN is now '$TOKEN'"
log "ACHAT is now '$ACHAT'"

log "Importing config file(s)..."

for f in /etc/telegram.sh.conf ~/.telegram.sh; do
	log "looking for $f"
	[ -r $f ] && . $f
done

[ -z "$TOKEN" ] && TOKEN=$TELEGRAM_TOKEN
[ -z "$ACHAT" ] && ACHAT=$TELEGRAM_CHAT
[ -n "$TELEGRAM_DISABLE_WEB_PAGE_PREVIEW" ] && DISABLE_WEB_PAGE_PREVIEW="$TELEGRAM_DISABLE_WEB_PAGE_PREVIEW"
[ -n "$TELEGRAM_DISABLE_NOTIFICATION" ] && DISABLE_NOTIFICATION="$TELEGRAM_DISABLE_NOTIFICATION"

log "TOKEN is now '$TOKEN'"
log "ACHAT is now '$ACHAT'"
log "DISABLE_WEB_PAGE_PREVIEW is now $DISABLE_WEB_PAGE_PREVIEW"
log "DISABLE_NOTIFICATION is now $DISABLE_NOTIFICATION"

if [ -z "$TOKEN" ]; then
	echo "No bot token was given."
	exit 1
fi

if [ -z "$ACHAT" ] && [ -z "$ACTION" ]; then
	echo "No chat given."
	exit 1
fi

if [ "$ACTION" = "list_chats" ]; then
	list_chats
	exit 0
fi

log "Text: $TEXT"

if [ "$TEXT" = "-" ] ; then
	TEXT=$(cat -)
fi

log "Text: $TEXT"

if [ $CODE_MODE -eq 1 ]; then
	TEXT='```'$'\n'$TEXT$'\n''```'
fi

log "Text: $TEXT"

if [ -n "$TITLE" ]; then
	if [ "$PARSE_MODE" = "HTML" ]; then
		TEXT="<b>$TITLE</b>"$'\n'"$TEXT"
	elif [ "$PARSE_MODE" = "Markdown" ]; then
		TEXT="*$TITLE*"$'\n'"$TEXT"
	else
		TEXT="$TITLE"$'\n'"$TEXT"
	fi
fi

if [ -z "$TEXT" ] && [ -z "$DOCUMENT_FILE" ] && [ -z "$IMAGE_FILE" ]; then
	echo "Message needs some text, image or file."
	exit 1
fi

if [ -n "$DOCUMENT_FILE" ] && [ -n "$IMAGE_FILE" ]; then
	echo "Can't send a file AND an image at the same time."
	exit 1
fi

[ -n "$PARSE_MODE" ] && CURL_OPTIONS="$CURL_OPTIONS --form-string parse_mode=$PARSE_MODE"
if [ -n "$DOCUMENT_FILE" ]; then
	check_file "$DOCUMENT_FILE"

	CURL_OPTIONS="$CURL_OPTIONS --form document=@$DOCUMENT_FILE"
	CURL_OPTIONS="$CURL_OPTIONS --form caption=<-"
	METHOD="sendDocument"
elif [ -n "$IMAGE_FILE" ]; then
	check_file "$IMAGE_FILE"
	CURL_OPTIONS="$CURL_OPTIONS --form photo=@$IMAGE_FILE"
	CURL_OPTIONS="$CURL_OPTIONS --form caption=<-"
	METHOD="sendPhoto"
else
	CURL_OPTIONS="$CURL_OPTIONS --form text=<-"
	[ "$DISABLE_WEB_PAGE_PREVIEW" = true ] && CURL_OPTIONS="$CURL_OPTIONS --form-string disable_web_page_preview=true"
	METHOD="sendMessage"
fi

[ "$DISABLE_NOTIFICATION" = true ] && CURL_OPTIONS="$CURL_OPTIONS --form-string disable_notification=true"

for id in "$ACHAT"; do
	MY_CURL_OPTIONS="$CURL_OPTIONS --form-string chat_id=$id $URL$TOKEN/$METHOD"
	if [ "$DRY_RUN" = true ]; then
		echo "Executing: curl $MY_CURL_OPTIONS"
		echo "     Text: $TEXT"
		echo
		status=0
		response='{"ok": true}'
	else
		response=`echo "$TEXT" | curl $MY_CURL_OPTIONS`
		status=$?
	fi
	log "Response was: $response"
	if [ $status -ne 0 ]; then
		echo "curl reported an error. Exit code was: $status."
		echo "Response was: $response"
		echo "Quitting."
		exit $status
	fi

	if ! fnmatch '{"ok":true*' "$response" ; then
		echo "Telegram reported an error:"
		json_console "$response"
		echo "Quitting."
		exit 1
	fi
done
